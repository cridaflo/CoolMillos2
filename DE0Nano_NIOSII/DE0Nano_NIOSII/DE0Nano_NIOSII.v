
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE0Nano_NIOSII(

	//////////// CLOCK //////////
	CLOCK_50,

	//////////// LED //////////
	LED,

	//////////// KEY //////////
	KEY,

	//////////// SW //////////
	SW,

	//////////// SDRAM //////////
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_DQM,
	DRAM_RAS_N,
	DRAM_WE_N,

	//////////// EPCS //////////
	EPCS_ASDO,
	EPCS_DATA0,
	EPCS_DCLK,
	EPCS_NCSO,

	//////////// Accelerometer and EEPROM //////////
	G_SENSOR_CS_N,
	G_SENSOR_INT,
	I2C_SCLK,
	I2C_SDAT,

	//////////// ADC //////////
	ADC_CS_N,
	ADC_SADDR,
	ADC_SCLK,
	ADC_SDAT,

	//////////// 2x13 GPIO Header //////////
	GPIO_2,
	GPIO_2_IN,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	GPIO_0,
	GPIO_0_IN,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	GPIO_1,
	GPIO_1_IN 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;

//////////// LED //////////
output		     [7:0]		LED;

//////////// KEY //////////
input 		     [1:0]		KEY;

//////////// SW //////////
input 		     [3:0]		SW;

//////////// SDRAM //////////
output		    [12:0]		DRAM_ADDR;
output		     [1:0]		DRAM_BA;
output		          		DRAM_CAS_N;
output		          		DRAM_CKE;
output		          		DRAM_CLK;
output		          		DRAM_CS_N;
inout 		    [15:0]		DRAM_DQ;
output		     [1:0]		DRAM_DQM;
output		          		DRAM_RAS_N;
output		          		DRAM_WE_N;

//////////// EPCS //////////
output		          		EPCS_ASDO;
input 		          		EPCS_DATA0;
output		          		EPCS_DCLK;
output		          		EPCS_NCSO;

//////////// Accelerometer and EEPROM //////////
output		          		G_SENSOR_CS_N;
input 		          		G_SENSOR_INT;
output		          		I2C_SCLK;
inout 		          		I2C_SDAT;

//////////// ADC //////////
output		          		ADC_CS_N;
output		          		ADC_SADDR;
output		          		ADC_SCLK;
input 		          		ADC_SDAT;

//////////// 2x13 GPIO Header //////////
inout 		    [12:0]		GPIO_2;
input 		     [2:0]		GPIO_2_IN;

//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
inout 		    [33:0]		GPIO_0;
input 		     [1:0]		GPIO_0_IN;

//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
inout 		    [33:0]		GPIO_1;
input 		     [1:0]		GPIO_1_IN;


//=======================================================
//  REG/WIRE declarations
//=======================================================

wire [7:0] LED_fake;
wire [7:0] LED_fake2;
wire [7:0] LED_fake3;
wire [33:0] GPIO_0_fake;
wire [7:0]fila_1,fila_2,fila_3,fila_4,fila_5,fila_6,fila_7,fila_8,max_in;
wire [2:0]act_add;
wire [15:0] sal_Ultra;
wire [7:0]conteo_piso;
//=======================================================
//  Structural coding
//=======================================================

Ultrasonido#(.DATAWIDTH(16)) u7( 
 .Ultrasonido_Conteo_Out(sal_Ultra),
 .Ultrasonido_Trigger_Out(GPIO_0[8]),
 .Ultrasonido_Clock (CLOCK_50), 
 .Ultrasonido_Echo_In(GPIO_0[9])
 ) ;

moduloEstadoInfrarojo #(.TIMEOUT(100)) u1(
         .reset(~KEY[0]),
			.clock(CLOCK_50),
			.inSignal(GPIO_0[0]),
			.outSignal(GPIO_0[1]),
			.conteo(conteo_piso),
			.contadorOut(LED_fake2),
			.hayNegro(LED_fake[1])
);
    niosII u0 (
        .clk_clk            (CLOCK_50),            //         clk.clk
        .reset_reset_n      (1'b1),      				//       reset.reset_n
        .rs232_0_RXD        (GPIO_0_IN[0]),        //     rs232_0.RXD
        .rs232_0_TXD        (GPIO_0_fake[32]),        //            .TXD
        .rs232_1_RXD        (GPIO_0_IN[1]),        //     rs232_1.RXD
        .rs232_1_TXD        (GPIO_0_fake[33]),         //            .TXD
        .port_led_export    (LED_fake3),    					//    port_led.export
        .port_key_export    (KEY),    					//    port_key.export
        .port_sw_export     (SW),     					//     port_sw.export
        .port_gpio_0_export (GPIO_0_fake[31:0]), 			// port_gpio_0.export
        .epcs_dclk          (EPCS_DCLK),          //        epcs.dclk
        .epcs_sce           (EPCS_NCSO),           //            .sce
        .epcs_sdo           (EPCS_ASDO),           //            .sdo
        .epcs_data0         (EPCS_DATA0),         //            .data0
        .sdram_addr         (DRAM_ADDR),         					  //       sdram.addr
        .sdram_ba           (DRAM_BA),           //            .ba
        .sdram_cas_n        (DRAM_CAS_N),        //            .cas_n
        .sdram_cke          (DRAM_CKE),          //            .cke
        .sdram_cs_n         (DRAM_CS_N),         //            .cs_n
        .sdram_dq           (DRAM_DQ),           //            .dq
        .sdram_dqm          (DRAM_DQM),          //            .dqm
        .sdram_ras_n        (DRAM_RAS_N),        //            .ras_n
        .sdram_we_n         (DRAM_WE_N),          //            .we_n
		  .ram_clk_clk        (DRAM_CLK),         //     ram_clk.clk
		  .adc_0_sclk         (ADC_SCLK),         //       adc_0.sclk
        .adc_0_cs_n         (ADC_CS_N),         //            .cs_n
        .adc_0_dout         (ADC_SDAT),         //            .dout
        .adc_0_din          (ADC_SADDR)           //            .din

    );

matrix_ctrl u3(
    .clk(CLOCK_50),
	 .reset(~KEY[0]),
    .disp_data(max_in),
    .intensity(4'b0101),
    .disp_addr(act_add),
    .max7219_din(GPIO_0[5]),
	 .max7219_ncs(GPIO_0[6]),
	 .max7219_clk(GPIO_0[7]) 
    );
Matriz#(.DATAWIDTH(8)) u4( 
 // / / / / / / / / / / OUTPUTS / / / / / / / / / / 
 .Matriz_Fila1_Out(fila_1),
 .Matriz_Fila2_Out(fila_2),
 .Matriz_Fila3_Out(fila_3),
 .Matriz_Fila4_Out(fila_4),
 .Matriz_Fila5_Out(fila_5),
 .Matriz_Fila6_Out(fila_6),
 .Matriz_Fila7_Out(fila_7),
 .Matriz_Fila8_Out(fila_8), 
 // / / / / / / / / / / INPUTS / / / / / / / / / / 
 .Matriz_Izq2_In(8'b00000000),
 .Matriz_Izq1_In(LED_fake),
 .Matriz_Der1_In(8'b00000000),
 .Matriz_Der2_In(conteo_piso)
 );
imagen u5(
    .act_add(act_add),
	 .fila_1(fila_1), 
	 .fila_2(fila_2), 
	 .fila_3(fila_3), 
	 .fila_4(fila_4), 
	 .fila_5(fila_5), 
	 .fila_6(fila_6), 
	 .fila_7(fila_7), 
	 .fila_8(fila_8),
    .max_in(max_in)
    );
moduloPWM u6(
.reset(KEY[0]),
.clock(CLOCK_50),
.inPWM(8'b10000000),
.outPWM(GPIO_0[10])
);
Leds #(.TIEMPO(50000000)) u8(
.reset(~KEY[0]),
.clock(CLOCK_50),
.salida(LED_fake[7])
);
Leds #(.TIEMPO(25000000)) u9(
.reset(~KEY[0]),
.clock(CLOCK_50),
.salida(LED_fake[6])
);
assign LED_fake[0] = ~LED_fake[1];
assign LED = sal_Ultra[7:0];
endmodule
