
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE0Nano_FreeRTOS(

	//////////// CLOCK //////////
	CLOCK_50,

	//////////// LED //////////
	LED,

	//////////// KEY //////////
	KEY,

	//////////// SW //////////
	SW,

	//////////// SDRAM //////////
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_DQM,
	DRAM_RAS_N,
	DRAM_WE_N,

	//////////// EPCS //////////
	EPCS_ASDO,
	EPCS_DATA0,
	EPCS_DCLK,
	EPCS_NCSO,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	GPIO_0,
	
	GPIO,
	
	GPIO_Lindo_IN
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;

//////////// LED //////////
output		     [7:0]		LED;

//////////// KEY //////////
input 		     [1:0]		KEY;

//////////// SW //////////
input 		     [3:0]		SW;

//////////// SDRAM //////////
output		    [12:0]		DRAM_ADDR;
output		     [1:0]		DRAM_BA;
output		          		DRAM_CAS_N;
output		          		DRAM_CKE;
output		          		DRAM_CLK;
output		          		DRAM_CS_N;
inout 		    [15:0]		DRAM_DQ;
output		     [1:0]		DRAM_DQM;
output		          		DRAM_RAS_N;
output		          		DRAM_WE_N;

//////////// EPCS //////////
output		          		EPCS_ASDO;
input 		          		EPCS_DATA0;
output		          		EPCS_DCLK;
output		          		EPCS_NCSO;

//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
inout 		    [33:0]		GPIO_0;

//////////// GPIO, GPIO connect to GPIO Default //////////
inout 		    [33:0]		GPIO;

//////////// GPIO_LINDO_IN //////////

input 		     [1:0]		GPIO_Lindo_IN;


//=======================================================
//  REG/WIRE declarations
//=======================================================

wire [7:0] outPWMIZQ;
wire [7:0] outPWMDER;
wire [4:0] test;
wire [33:0]GPIO_0_fake;
wire [7:0] LED_fake;


//=======================================================
//  Structural coding
//=======================================================

moduloPWM PWMIZQ(0, CLOCK_50, outPWMIZQ, GPIO[32]);
moduloPWM PWMDER(0, CLOCK_50, outPWMDER, GPIO[33]);


moduloEstadoInfrarojo #(.TIMEOUT(16250)) izq2 (.reset(KEY[0]),  .clock(CLOCK_50),  .inSignal(GPIO_0[0]),  .outSignal(GPIO_0[1]),  .conteo(LED));


    niosII u0 (
        .clk_clk            (CLOCK_50),            //         clk.clk
		  .nios_pwm_izq_export			(outPWMIZQ),
		  .nios_pwm_der_export			(outPWMDER),
        .epcs_dclk          (EPCS_DCLK),          //        epcs.dclk
        .epcs_sce           (EPCS_NCSO),           //            .sce
        .epcs_sdo           (EPCS_ASDO),           //            .sdo
        .epcs_data0         (EPCS_DATA0),         //            .data0
        .port_led_export    (LED_fake),    					//    port_led.export
		  .port_keys_export    (test[1:0]),    					//    port_led.export
        .port_gpio_0_export (GPIO_0_fake[31:0]), 			// port_gpio_0.export
		  .io_pio1_external_interface_export (GPIO[31:0]), 			// io_pio1_external_interface
		  .ram_clk_clk        (DRAM_CLK),         //     ram_clk.clk
        .reset_reset_n      (1),      				//       reset.reset_n	  
        .uart_rxd           (GPIO_Lindo_IN[0]),           //        uart.rxd
        .uart_txd           (GPIO_0_fake[32]),            //            .txd
		  .uart_2_rxd           (GPIO_Lindo_IN[1]),           //        uart_2.rxd
        .uart_2_txd           (GPIO_0_fake[33]),            //            .txd_2
        .sdram_addr         (DRAM_ADDR),         					  //       sdram.addr
        .sdram_ba           (DRAM_BA),           //            .ba
        .sdram_cas_n        (DRAM_CAS_N),        //            .cas_n
        .sdram_cke          (DRAM_CKE),          //            .cke
        .sdram_cs_n         (DRAM_CS_N),         //            .cs_n
        .sdram_dq           (DRAM_DQ),           //            .dq
        .sdram_dqm          (DRAM_DQM),          //            .dqm
        .sdram_ras_n        (DRAM_RAS_N),        //            .ras_n
        .sdram_we_n         (DRAM_WE_N)          //            .we_n
    );
	 

	

	 
	 
endmodule
